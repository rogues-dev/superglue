buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.2'
    classpath 'me.tatarka:gradle-retrolambda:3.6.1'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.4'
  }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.getkeepsafe.dexcount'
apply from: "$rootDir/gradle/signing.gradle"
apply from: "$rootDir/gradle/checkstyle.gradle"

repositories {
  jcenter()
}

 def getGitSha() {
   def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
   p.waitFor()
   if (p.exitValue() != 0) {
     throw new RuntimeException(p.errorStream.text)
   }

   return p.text.trim()
 }

 def getGitTimestamp() {
   def p = 'git log -n 1 --format=%at'.execute([], rootDir)
   p.waitFor()
   if (p.exitValue() != 0) {
     throw new RuntimeException(p.errorStream.text)
   }

   return p.text.trim()
 }

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.2'

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'android'
      keyPassword 'android'
    }
    // todo replace with path to release key, see gradle/signing.gradle for parameter passing
    release {
      storeFile file("$rootDir/debug.keystore")
      storePassword keystorePassword
      keyAlias keystoreAlias
      keyPassword keystoreAliasPassword
    }
  }

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 25

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField 'String', 'GIT_SHA', "\"$gitSha\""
    buildConfigField 'long', 'GIT_TIMESTAMP', "$gitTimestamp"
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      signingConfig signingConfigs.debug
    }
    release {
      // todo change to release when release key is added
      signingConfig signingConfigs.debug
    }
  }

  productFlavors {
    internal {
      applicationId 'superglue.internal'
    }
    production {
      applicationId 'superglue'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    ignore 'InvalidPackage' // okio has some java 8 references not included in ASOP yet.
    fatal 'UnusedResources'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE.txt'
  }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
  internalDebugCompile
}

ext {
  supportVersion = '25.3.1'
  stethoVersion = '1.5.0'
  retrofitVersion = '2.2.0'
}

dependencies {
  compile "com.android.support:support-v4:$supportVersion"
  compile "com.android.support:support-annotations:$supportVersion"
  compile "com.android.support:appcompat-v7:$supportVersion"
  compile "com.android.support:recyclerview-v7:$supportVersion"
  compile "com.android.support:design:$supportVersion"

  compile 'com.google.dagger:dagger:2.10'
  annotationProcessor 'com.google.dagger:dagger-compiler:2.10'

  compile 'com.squareup.okhttp3:okhttp:3.7.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.7.0'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
  compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
  compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
  compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
  internalDebugCompile "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"

  compile 'com.jakewharton:butterknife:8.5.1'
  annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

  compile 'com.jakewharton.timber:timber:4.5.1'
  compile 'com.jakewharton.byteunits:byteunits:0.9.1'
  compile 'com.jakewharton.rxbinding:rxbinding:1.0.1'
  compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'
  compile 'com.jakewharton:process-phoenix:2.0.0'
  internalDebugCompile 'com.jakewharton.madge:madge:1.1.4'
  internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'

  internalCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
  productionCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

  compile 'io.reactivex:rxjava:1.2.10'
  compile 'io.reactivex:rxandroid:1.2.1'

  internalCompile 'com.mattprecious.telescope:telescope:2.1.0@aar'

  compile 'com.f2prateek.rx.preferences:rx-preferences:1.0.2'

  internalCompile "com.facebook.stetho:stetho:$stethoVersion"
  internalCompile "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
  internalCompile "com.facebook.stetho:stetho-timber:$stethoVersion@aar"
}

configurations.all {
  resolutionStrategy {
    force "com.android.support:support-annotations:$supportVersion"
  }
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
  installAll.dependsOn(variant.install)
  // Ensure we end up in the same group as the other install tasks.
  installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
  tasks.getByName('assemble').dependsOn variant.assemble
}

// skip alpha, beta, and rc versions when checking for dependency updates
dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
